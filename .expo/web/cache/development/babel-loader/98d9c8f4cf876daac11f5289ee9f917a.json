{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var fetchWrapper = function fetchWrapper(arg1, url, body, additionalOptions) {\n  var _method = url ? arg1.toUpperCase() : \"GET\";\n\n  var _url = url || arg1;\n\n  var options = _objectSpread({\n    method: _method,\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": \"8967305C-13F4-4A15-A84B-358E3F85C010\",\n      \"client-key\": \"aaa61dcb-6d5f-4e31-834b-dc076bd221ed\",\n      Authorization: \"Basic dGVzdGNsaW5pYzY6dGVzdGNsaW5pYzY=\"\n    },\n    credentials: \"include\",\n    body: body && JSON.stringify(body)\n  }, additionalOptions);\n\n  return fetch(_url, options).then(function (response) {\n    return response.json();\n  });\n};","map":{"version":3,"sources":["D:/MyAppointment-master/services/restApi.js"],"names":["fetchWrapper","arg1","url","body","additionalOptions","_method","toUpperCase","_url","options","method","headers","Accept","Authorization","credentials","JSON","stringify","fetch","then","response","json"],"mappings":";;;;;;AASA,OAAO,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAOC,GAAP,EAAYC,IAAZ,EAAkBC,iBAAlB,EAAwC;AAElE,MAAMC,OAAO,GAAGH,GAAG,GAAGD,IAAI,CAACK,WAAL,EAAH,GAAwB,KAA3C;;AAEA,MAAMC,IAAI,GAAGL,GAAG,IAAID,IAApB;;AAEA,MAAMO,OAAO;AACXC,IAAAA,MAAM,EAAEJ,OADG;AAEXK,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,kBADD;AAEP,sBAAgB,kBAFT;AAGP,mBAAa,sCAHN;AAIP,oBAAc,sCAJP;AAKPC,MAAAA,aAAa,EAAE;AALR,KAFE;AASXC,IAAAA,WAAW,EAAE,SATF;AAUXV,IAAAA,IAAI,EAAEA,IAAI,IAAIW,IAAI,CAACC,SAAL,CAAeZ,IAAf;AAVH,KAWRC,iBAXQ,CAAb;;AAcA,SAAOY,KAAK,CAACT,IAAD,EAAOC,OAAP,CAAL,CAAqBS,IAArB,CAA0B,UAACC,QAAD;AAAA,WAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,GAA1B,CAAP;AACD,CArBM","sourcesContent":["/**\r\n * @function fetchWrapper\r\n * @param {string} arg1 - REST method | url\r\n * @param {string} [url] - url\r\n * @param {Object} [body] - body of message\r\n * @description\r\n *   Wrapper for the fetch api that provides options defaults and base response code handling.\r\n * @return {Promise<Object>} A promise containing the deserialized response object.\r\n * */\r\nexport const fetchWrapper = (arg1, url, body, additionalOptions) => {\r\n  // if called with one argument, default to 'GET' method\r\n  const _method = url ? arg1.toUpperCase() : \"GET\";\r\n  // if called without method arg, the first\r\n  const _url = url || arg1;\r\n\r\n  const options = {\r\n    method: _method,\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n      \"x-api-key\": \"8967305C-13F4-4A15-A84B-358E3F85C010\",\r\n      \"client-key\": \"aaa61dcb-6d5f-4e31-834b-dc076bd221ed\",\r\n      Authorization: \"Basic dGVzdGNsaW5pYzY6dGVzdGNsaW5pYzY=\",\r\n    },\r\n    credentials: \"include\",\r\n    body: body && JSON.stringify(body), // body can be undefined, that's ok\r\n    ...additionalOptions,\r\n  };\r\n\r\n  return fetch(_url, options).then((response) => response.json());\r\n};\r\n"]},"metadata":{},"sourceType":"module"}